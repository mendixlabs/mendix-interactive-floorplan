<?xml version="1.0" encoding="utf-8"?>
<widget id="mendix.interactivefloorplan.InteractiveFloorplan" pluginWidget="true" needsEntityContext="true" offlineCapable="true" supportedPlatform="Web"
    xmlns="http://www.mendix.com/widget/1.0/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mendix.com/widget/1.0/ ../node_modules/mendix/custom_widget.xsd">
    <name>Interactive Floorplan</name>
    <description>Interactive Floorplan</description>
    <icon/>
    <properties>
        <!-- FLOOR-->
        <propertyGroup caption="Floor">
            <property key="textSVG" type="expression" required="true" defaultValue="">
                <caption>SVG</caption>
                <description>This is the background of the floorplan. It should be an SVG.</description>
                <returnType type="String" />
            </property>
            <property key="textSVGViewBox" type="expression" required="true" defaultValue="">
                <caption>Viewbox</caption>
                <description>An SVG has a viewbox property. We need to have this separately in order to align the desk perfectly</description>
                <returnType type="String" />
            </property>
        </propertyGroup>

        <!-- ASSETS -->
        <propertyGroup caption="Assets">
            <propertyGroup caption="Data">
                <property key="dataAssets" type="datasource" isList="true" required="true">
                    <caption>Asset Datasource</caption>
                    <description>This is a datasource that represents the assets you want to position on the floorplan, e.g. Desks</description>
                </property>
            </propertyGroup>
            <propertyGroup caption="Properties">
                <property key="getAssetID" type="expression" required="true" defaultValue="" dataSource="dataAssets">
                    <caption>Asset ID</caption>
                    <description>This represents the Asset ID that is visible, for example the Desk Number.</description>
                    <returnType type="String" />
                </property>
                <property key="getAssetXML" type="expression" required="true" defaultValue="" dataSource="dataAssets">
                    <caption>Asset XML</caption>
                    <description>This is the XML that is associated with the Asset element. This should be a &lt;g&gt; element.</description>
                    <returnType type="String" />
                </property>
                <property key="getAssetTransform" type="expression" required="true" defaultValue="" dataSource="dataAssets">
                    <caption>Asset Transform</caption>
                    <description>In order to properly place the asset on the floorplan, we need the CSS transform property that is affecting the position and rotation of the asset.</description>
                    <returnType type="String" />
                </property>
                <property key="getAssetClassName" type="expression" required="false" defaultValue="" dataSource="dataAssets">
                    <caption>Asset className</caption>
                    <description>This is a dynamic className for an Asset, for example to make them a different color, influence interaction patterns (clickable) using CSS.</description>
                    <returnType type="String" />
                </property>
            </propertyGroup>
            <propertyGroup caption="Interaction">
                <property key="getAssetClickable" type="expression" required="true" defaultValue="" dataSource="dataAssets">
                    <caption>Clickable</caption>
                    <description>Should the asset be clickable?</description>
                    <returnType type="Boolean" />
                </property>
                <property key="getAssetShowHoverPopup" type="expression" required="true" defaultValue="false" dataSource="dataAssets">
                    <caption>Hover Popup</caption>
                    <description>Should the asset have a hover popup? This uses the 'Popup Hover Area' of the widget.</description>
                    <returnType type="Boolean" />
                </property>
                <property key="getAssetShowClickPopup" type="expression" required="true" defaultValue="false" dataSource="dataAssets">
                    <caption>Click Popup</caption>
                    <description>Should the asset have a click popup? This uses the 'Popup Click Area' of the widget.</description>
                    <returnType type="Boolean" />
                </property>
                <property key="showPageOverlayOnClickPopup" type="boolean" defaultValue="true">
                    <caption>Page overlay (click)</caption>
                    <description>Show a complete page overlay (making interactions on whole page impossible) when showing a Click Popup</description>
                </property>
            </propertyGroup>
            <propertyGroup caption="Areas">
                <property key="popupHoverArea" type="widgets" required="false" dataSource="dataAssets">
                    <caption>Popup Hover Area</caption>
                    <description>Show a popup when hovering over the element</description>
                </property>
                <property key="popupClickArea" type="widgets" required="false" dataSource="dataAssets">
                    <caption>Popup Click Area</caption>
                    <description>Show a popup when click on the element</description>
                </property>
            </propertyGroup>
        </propertyGroup>

        <!-- ACTIONS -->
        <propertyGroup caption="Actions">
            <property key="actionClickAsset" type="action" required="false" dataSource="dataAssets">
                <caption>On Click</caption>
                <description></description>
            </property>
        </propertyGroup>

        <!-- MISC -->
        <propertyGroup caption="Misc">
            <propertyGroup caption="Selectors">
                <property key="uiSelectorText" type="string" required="false" defaultValue="text">
                    <caption>Text Selector</caption>
                    <description>D3 selector for selecting the text element in your Asset SVG. If you do not choose one, the widget will not update the text inside. Only change this if needed.</description>
                </property>
                <property key="uiSelectorGElement" type="string" required="false" defaultValue="rect">
                    <caption>Shape selector</caption>
                    <description>D3 selector for the shape inside the Asset SVG. This is used to manipulate the styling when needed. Only change this if needed.</description>
                </property>
                <property key="uiMainSelectorG" type="string" required="true" defaultValue="#main">
                    <caption>Main selector in SVG</caption>
                    <description>Only change this when needed, otherwise leave as is.</description>
                </property>
            </propertyGroup>
            <propertyGroup caption="Attributes">
                <property key="getAssetShapeStyling" type="expression" dataSource="dataAssets" required="false">
                    <caption>Shape style</caption>
                    <description>Attribute that defines the shape styling (see above)</description>
                    <returnType type="String" />
                </property>
            </propertyGroup>
        </propertyGroup>

        <!-- COMMON -->
        <propertyGroup caption="Common">
            <systemProperty key="Name"/>
            <systemProperty key="Visibility"/>
            <systemProperty key="Editability"/>
        </propertyGroup>
    </properties>
</widget>
